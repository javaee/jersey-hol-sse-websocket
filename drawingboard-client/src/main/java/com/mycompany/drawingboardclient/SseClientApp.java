/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License.  You can
 * obtain a copy of the License at
 * http://glassfish.java.net/public/CDDL+GPL_1_1.html
 * or packager/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at packager/legal/LICENSE.txt.
 *
 * GPL Classpath Exception:
 * Oracle designates this particular file as subject to the "Classpath"
 * exception as provided by Oracle in the GPL Version 2 section of the License
 * file that accompanied this code.
 *
 * Modifications:
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyright [year] [name of copyright owner]"
 *
 * Contributor(s):
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */
package com.mycompany.drawingboardclient;

import java.awt.EventQueue;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ws.rs.client.WebTarget;
import javax.swing.DefaultListModel;
import org.glassfish.jersey.media.sse.EventSource;

/**
 *
 * @author Marek Potociar (marek.potociar at oracle.com)
 */
public class SseClientApp extends javax.swing.JFrame {

    /** Creates new form SseClientWindow */
    public SseClientApp() {
        this.drawingsListModel = new DefaultListModel();
        this.executor = Executors.newCachedThreadPool();

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawingsUrlInput = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        drawingsList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        eventData = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        startStopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 320));
        setName("mainFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                onClose(evt);
            }
        });

        drawingsUrlInput.setText("http://localhost:8080/drawingboard/api/drawings");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        drawingsList.setModel(drawingsListModel);
        jScrollPane1.setViewportView(drawingsList);

        eventData.setColumns(20);
        eventData.setRows(5);
        eventData.setFocusable(false);
        jScrollPane2.setViewportView(eventData);

        statusLabel.setText("Application stopped.");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(statusLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, statusLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane2)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addContainerGap())
        );

        startStopButton.setText("Start");
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onStartStop(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(drawingsUrlInput)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startStopButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(drawingsUrlInput, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(startStopButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle Start/Stop button click events.
     *
     * The method updates the internal application state as well as
     * the state of GUI components and based on the updated state either
     * tries to connect or disconnect to the drawings application and it's
     * SSE events.
     *
     * @param evt button click event.
     */
    private void onStartStop(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStartStop
        started = !started;
        drawingsUrlInput.setEditable(!started);
        startStopButton.setText(started ? "Stop" : "Start");

        if (started) {
            statusLabel.setText("Starting application...");
            eventData.setText("");
            final String url = drawingsUrlInput.getText();
            eventSourceFuture = executor.submit(new Callable<EventSource>() {
                @Override
                public EventSource call() throws Exception {
                    try {
                        return connect(url);
                    } catch (Exception ex) {
                        stopAsFailed(ex.getCause().getMessage());
                        throw ex;
                    }
                }
            });
        } else {
            statusLabel.setText("Stopping application...");

            final EventSource eventSource;
            try {
                eventSource = eventSourceFuture.get();
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
                stopAsFailed(ex.getMessage());
                return;
            } catch (ExecutionException ex) {
                stopAsFailed(ex.getCause().getMessage());
                return;
            }

            executor.submit(new Runnable() {
                @Override
                public void run() {
                    try {
                        disconnect(eventSource);
                    } finally {
                        updateStatus("Application stopped.");
                    }
                }
            });
        }
    }//GEN-LAST:event_onStartStop

    /**
     * Clean up the application resources before exiting.
     *
     * The method is invoked as a result of a main window closed event.
     *
     * @param evt window closed event.
     */
    private void onClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClose
        executor.shutdown();
        try {
            if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {
                System.out.println("Waiting for all tasks to finish has timed out.");
            }
        } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
        }
    }//GEN-LAST:event_onClose

    /**
     * Run the SSE client application.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SseClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SseClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SseClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SseClientWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                final SseClientApp mainWindow = new SseClientApp();
                mainWindow.setLocationRelativeTo(null);
                mainWindow.setVisible(true);
            }
        });
    }
    private final DefaultListModel drawingsListModel;
    private final ExecutorService executor;
    private boolean started = false;
    private Future<EventSource> eventSourceFuture;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList drawingsList;
    private javax.swing.JTextField drawingsUrlInput;
    private javax.swing.JTextArea eventData;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton startStopButton;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Connect to the Drawings Web Application.
     *
     * @param drawingsUrl Drawings resource URL.
     * @return Jersey SSE EventSource connected to drawings resource SSE events.
     */
    private EventSource connect(String drawingsUrl) {
        // TODO: update list of drawings and connect from the event source
        return null;
    }

    /**
     * Disconnect from the drawings SSE event source.
     *
     * @param eventSource drawings SSE event source.
     */
    private void disconnect(final EventSource eventSource) {
        // TODO: disconnect from the event source
    }

    /**
     * Get the list of available individual drawing resources.
     *
     * @param drawingsResource drawings resource JAX-RS web target.
     * @return list of available individual drawing resources.
     */
    private List<Drawing> getDrawings(final WebTarget drawingsResource) {
        // TODO: get the list of drawings
        return Collections.emptyList();
    }

    /**
     * Update the list of drawings in the GUI.
     *
     * This method first invokes {@link #getDrawings(javax.ws.rs.client.WebTarget)}
     * to retrieve the list of available drawing resources and then updates
     * the content of GUI drawing list component to match the current list
     * available drawing resources.
     *
     * @param drawingsResource
     */
    private void updateDrawings(final WebTarget drawingsResource) {
        final List<Drawing> drawings = getDrawings(drawingsResource);

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                drawingsListModel.clear();
                for (Drawing drawing : drawings) {
                    drawingsListModel.addElement(drawing.name);
                }
            }
        });
    }

    /**
     * Update the text in the status label GUI component.
     *
     * @param statusText new status text.
     */
    private void updateStatus(final String statusText) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                statusLabel.setText(statusText);
            }
        });
    }

    /**
     * Add new SSE event data to be displayed in the
     * event data GUI component.
     *
     * @param data new event data.
     */
    private void appendEventData(final String data) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                eventData.append(data + '\n');
            }
        });
    }

    /**
     * Stop the application as failed.
     *
     * This method updates the internal application state as well
     * as state of all GUI components to "stopped" state.
     * The status message is updated to inform about the failure
     * using the information provided in the {@code failureMessage}
     * parameter.
     *
     * @param failureMessage message describing the failure.
     */
    private void stopAsFailed(final String failureMessage) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                started = false;
                drawingsUrlInput.setEditable(true);
                startStopButton.setText("Start");
                statusLabel.setText(String.format(
                        "Application failed to start (%s).", failureMessage));
            }
        });
    }
}
